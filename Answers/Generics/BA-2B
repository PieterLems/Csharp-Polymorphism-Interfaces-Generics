using System;

namespace Tests
{
  interface Option<a>
  {
    b Visit< b >(Func<a, b> on_some, Func<b> on_none);
  }

  class None<a> : Option<a>
  {
    public None() { }

    public b Visit< b >(Func<a, b> on_some, Func<b> on_none)
    {
      return on_none();
    }
  }

  class Some<a> : Option<a>
  {
    public a v;
    public Some(a v) { this.v = v; }

    public b Visit<b >(Func<a, b> on_some, Func<b> on_none)
    {
      return on_some(this.v);
    }
  }

  class Treasure
  {
    public int gold;

    public Treasure()
    {
      this.gold = 100 ;
    }
  }

  class Test {
    public static void Main(string[] args) {
      // In a lot of games you can defeat monsters, and then
      // sometimes you'll get a treasure and sometimes not.
      var treasure_or_not = new Option< Treasure>[] {
        new None  <Treasure>(),
        new Some <Treasure>(new Treasure()),
        new None  <Treasure>(),
        new None  <Treasure>(),
        new Some  <Treasure>(new Treasure()) };

      int loot = 0;
      // Let's count the loot!
      for (int i = 0; i < treasure_or_not.Length; i++) {
        Func< Treasure,  int> onSome = v => v. gold ;
        Func<int> onNone = () => 0 ;
        loot += treasure_or_not[i].Visit<int>(onSome, onNone);
      }
    }
  }
}
