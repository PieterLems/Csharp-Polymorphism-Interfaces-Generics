namespace Tests
{
  interface Visitor<a,b> {
    b OnSome(a _a);
    b OnNone();
  }

  interface Option<a, b> {
    b Visit(Visitor<a, b> v);
  }

  class None< a ,  b > : Option<a, b> {
    public None() { }

    public b Visit(Visitor<a,b> vis) {
      return vis.OnNone();
    }
  }

  class Some<a, b> : Option<a, b> {
     a v ;
    public Some( a v ) { this.v = v; }

    public b Visit(Visitor <a,b> vis ) {
      return vis.OnSome(this.v);
    }
  }

  class Simple {
    public static void Main(string[] args){
      int n = 1;
      var values_or_not = new Option<int,string>[] {
        new Some<int,string>(91),
        new None<int,string>(),
        new None<int,string>(),
        new Some<int,string>(7),
        new Some<int,string>(6) };

      var s   = ""  ;
      var v = new IntVisitorToString();
      for(int i = 0; i < values_or_not.Length; i = i + 1) {
        var x = values_or_not[i];
        s =  s + x.Visit(v) + "; " ;
      }
    }
  }

class IntVisitorToString : Visitor<int,string>
{
  public string OnNone()
  {
    return "###";
  }
  public string OnSome(int v)
  {
    return "|" + v + "|";
  }
}
}