

namespace Tests
{
  interface Option<a> {
    b Visit<b>(Func< a ,  b > on_some, Func< b > on_none);  // GEEF ALTIJD EERST DE GENERIC MEE IN DE FUNC  (a) EN DAN DE RETURNTYPE (b) 
  }

  class None<a> : Option<a> {
    public None() { }

    public b Visit<b>(Func<a, b> on_some, Func<b> on_none) { // Doe het zelfde als hierboven
      return on_none()  ; // SINDS DE CLASS NONE IS RETURN JE on_none
    }
  }

  class Some<a> : Option<a> {
    public  a  v;
    public Some(a v) { this.v = v; }

    public b Visit<b>(Func<a, b> on_some, Func<b> on_none)
    {
      return on_some(this.v)  ; //SINDS DE CLASS SOME IS RETURN JE on_some EN GEEF JE DE v MEE
    }
  }

  class Simple {
    public static void Main(string[] args){
      var values_or_not = new Option<int>[] {
        new  None <int>(),
        new  Some <int>(10),
        new  Some <int>(2),
        new None  <int>() };
      var s = "";
      for(int i = 0; i < values_or_not.Length; i = i + 1)
      {
        var x = values_or_not[i];
        Func<int,string> onSome = v => "Value: " + v ;
        Func<string> onNone = () =>  "No value" ;
        s = s + x  .Visit  <string>(onSome  , onNone  ) + "; ";
      }
    }
  }
}